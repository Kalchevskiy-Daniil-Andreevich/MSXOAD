-- Дополнительный конструктор;(дает возможность создатвать 
--объект по выбранным параметрам а все остльное по дефолту
-- Создание типа данных для Автора
CREATE TYPE AUTHORЕtype AS OBJECT (
    ID_AUTHOR NUMBER,
    LASTNAME_AUTHOR NVARCHAR2(255),
    NAME_AUTHOR NVARCHAR2(255),
    MIDDLENAME_AUTHOR NVARCHAR2(255),
    CONSTRUCTOR FUNCTION AUTHORЕtype(SELF IN OUT NOCOPY AUTHORЕtype, ID_AUTHOR NUMBER, LASTNAME_AUTHOR NVARCHAR2, NAME_AUTHOR NVARCHAR2, MIDDLENAME_AUTHOR NVARCHAR2) RETURN SELF AS RESULT,
    MAP MEMBER FUNCTION get_id RETURN NUMBER,
    MEMBER FUNCTION full_name RETURN NVARCHAR2,
    MEMBER PROCEDURE print_full_name
);

-- Реализация методов для типа данных Автора
CREATE OR REPLACE TYPE BODY AUTHORЕtype AS
    CONSTRUCTOR FUNCTION AUTHORЕtype(SELF IN OUT NOCOPY AUTHORЕtype, ID_AUTHOR NUMBER, LASTNAME_AUTHOR NVARCHAR2, NAME_AUTHOR NVARCHAR2, MIDDLENAME_AUTHOR NVARCHAR2) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID_AUTHOR := ID_AUTHOR;
        SELF.LASTNAME_AUTHOR := LASTNAME_AUTHOR;
        SELF.NAME_AUTHOR := NAME_AUTHOR;
        SELF.MIDDLENAME_AUTHOR := MIDDLENAME_AUTHOR;
        RETURN;
    END;

    MAP MEMBER FUNCTION get_id RETURN NUMBER IS
    BEGIN
        RETURN ID_AUTHOR;
    END;

    MEMBER FUNCTION full_name RETURN NVARCHAR2 IS
    BEGIN
        RETURN LASTNAME_AUTHOR || ' ' || NAME_AUTHOR || ' ' || MIDDLENAME_AUTHOR;
    END;

    MEMBER PROCEDURE print_full_name IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE(full_name());
    END;
END;


-- Создание типа данных для Книги
CREATE OR REPLACE TYPE BOOKtype AS OBJECT (
    ID_BOOK NUMBER,
    AUTHOR AUTHORЕtype,
    ID_GENRE NUMBER,
    NAME_BOOK NVARCHAR2(255),
    DIRECTION_BOOK NVARCHAR2(255),
    YEAR_OF_PUBLISHING DATE,
    CONSTRUCTOR FUNCTION BOOKtype(SELF IN OUT NOCOPY BOOKtype, ID_BOOK NUMBER, AUTHOR AUTHORЕtype, ID_GENRE NUMBER, NAME_BOOK NVARCHAR2, DIRECTION_BOOK NVARCHAR2, YEAR_OF_PUBLISHING DATE) RETURN SELF AS RESULT,
    MAP MEMBER FUNCTION get_id RETURN NUMBER,
    MEMBER FUNCTION get_name RETURN NVARCHAR2,
    MEMBER PROCEDURE print_book_info
);

-- Реализация методов для типа данных Книги
CREATE OR REPLACE TYPE BODY BOOKtype AS
    CONSTRUCTOR FUNCTION BOOKtype(SELF IN OUT NOCOPY BOOKtype, ID_BOOK NUMBER, AUTHOR AUTHORЕtype, ID_GENRE NUMBER, NAME_BOOK NVARCHAR2, DIRECTION_BOOK NVARCHAR2, YEAR_OF_PUBLISHING DATE) RETURN SELF AS RESULT IS
    BEGIN
        SELF.ID_BOOK := ID_BOOK;
        SELF.AUTHOR := AUTHOR;
        SELF.ID_GENRE := ID_GENRE;
        SELF.NAME_BOOK := NAME_BOOK;
        SELF.DIRECTION_BOOK := DIRECTION_BOOK;
        SELF.YEAR_OF_PUBLISHING := YEAR_OF_PUBLISHING;
        RETURN;
    END;

    MAP MEMBER FUNCTION get_id RETURN NUMBER IS
    BEGIN
        RETURN ID_BOOK;
    END;

    MEMBER FUNCTION get_name RETURN NVARCHAR2 IS
    BEGIN
        RETURN NAME_BOOK;
    END;

    MEMBER PROCEDURE print_book_info IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('ID: ' || ID_BOOK || ', Name: ' || NAME_BOOK || ', Author: ' || AUTHOR.full_name() || ', Genre ID: ' || ID_GENRE || ', Direction: ' || DIRECTION_BOOK || ', Year of Publishing: ' || TO_CHAR(YEAR_OF_PUBLISHING, 'YYYY'));
    END;
END;

CREATE TABLE AUTHORS_OBJ OF AUTHORЕtype;
CREATE TABLE BOOKS_OBJ OF BOOKtype;

INSERT INTO AUTHORS_OBJ SELECT * FROM AUTHORS;
INSERT INTO BOOKS_OBJ (
    SELECT 
        BOOKtype(ID_BOOK, AUTHORЕtype(ID_AUTHOR, NULL, NULL, NULL), ID_GENRE, NAME_BOOK, DIRECTION_BOOK, YEAR_OF_PUBLISHING)
    FROM BOOKS
);

SELECT * FROM AUTHORS_OBJ;
SELECT * FROM BOOKS_OBJ;

-- Создание объектного представления для типа данных "Автор"
CREATE OR REPLACE VIEW AUTHOR_VIEW AS
SELECT
    a.ID_AUTHOR AS ID_AUTHOR,
    a.LASTNAME_AUTHOR AS LASTNAME_AUTHOR,
    a.NAME_AUTHOR AS NAME_AUTHOR,
    a.MIDDLENAME_AUTHOR AS MIDDLENAME_AUTHOR
FROM AUTHORS_OBJ a;

-- Создание объектного представления для типа данных "Книга"
CREATE OR REPLACE VIEW BOOK_VIEW AS
SELECT
    b.ID_BOOK AS ID_BOOK,
    b.AUTHOR AS AUTHOR,
    b.ID_GENRE AS ID_GENRE,
    b.NAME_BOOK AS NAME_BOOK,
    b.DIRECTION_BOOK AS DIRECTION_BOOK,
    b.YEAR_OF_PUBLISHING AS YEAR_OF_PUBLISHING
FROM BOOKS_OBJ b;

SELECT * FROM AUTHOR_VIEW;
SELECT * FROM BOOK_VIEW;

CREATE INDEX IDX_AUTHOR_ID ON AUTHORS_OBJ(ID_AUTHOR);
CREATE INDEX IDX_BOOK_ID ON BOOKS_OBJ(ID_BOOK);

SELECT * FROM AUTHORS_OBJ WHERE ID_AUTHOR = 1;
SELECT * FROM BOOKS_OBJ WHERE ID_BOOK = 1;