CREATE TABLE BOOKS(
	ID_BOOK INT PRIMARY KEY NOT NULL,
	ID_AUTHOR INT NOT NULL,
	ID_GENRE INT NOT NULL,
	NAME_BOOK VARCHAR(255) NOT NULL,
	YEAR_OF_PUBLISHING DATE NOT NULL,
	FOREIGN KEY (ID_AUTHOR) REFERENCES AUTHORS(ID_AUTHOR),
	FOREIGN KEY (ID_GENRE) REFERENCES GENRES(ID_GENRE)
);

SELECT * FROM BOOKS;

CREATE TABLE EMPLOYEES (
    ID_EMPLOYEE INT PRIMARY KEY NOT NULL,
    NAME_EMPLOYEE VARCHAR(255) NOT NULL,
    POSITION VARCHAR(255) NOT NULL
);

CREATE TABLE AUTHORS(
	ID_AUTHOR INT PRIMARY KEY NOT NULL,
	LASTNAME_AUTHOR VARCHAR(255) NOT NULL,
	NAME_AUTHOR VARCHAR(255) NOT NULL,
	MIDDLENAME_AUTHOR VARCHAR(255) NOT NULL
);

CREATE TABLE GENRES(
	ID_GENRE INT PRIMARY KEY NOT NULL,
	NAME_GENRE VARCHAR(255) NOT NULL
);

CREATE TABLE READERS(
	ID_READER INT PRIMARY KEY NOT NULL,
	LASTNAME_READER VARCHAR(255) NOT NULL,
	NAME_READER VARCHAR(255) NOT NULL,
	MIDDLENAME_READER VARCHAR(255) NOT NULL
);
	

CREATE TABLE ORDERS(
	ID_ORDER INT PRIMARY KEY NOT NULL,
	ID_BOOK INT NOT NULL,
	ID_READER INT NOT NULL,
	DATE_ORDER DATE NOT NULL,
	PRICE_ORDER INT,
	FOREIGN KEY (ID_BOOK) REFERENCES BOOKS(ID_BOOK),
	FOREIGN KEY (ID_READER) REFERENCES READERS(ID_READER)
);


CREATE TABLE REVIEWS(
	ID_REVIEW INT PRIMARY KEY NOT NULL,
	ID_BOOK INT NOT NULL,
	ID_READER INT NOT NULL,
	RATING DECIMAL NOT NULL,
	FOREIGN KEY (ID_BOOK) REFERENCES BOOKS (ID_BOOK),
	FOREIGN KEY (ID_READER) REFERENCES READERS(ID_READER)
);

CREATE TABLE STOCKS(
	ID_STOCK INT PRIMARY KEY NOT NULL,
	ID_BOOK INT NOT NULL,
	COUNT_BOOK INT NOT NULL,
	DATE_ARRIVAL DATE NOT NULL,
	FOREIGN KEY(ID_BOOK) REFERENCES BOOKS(ID_BOOK)
);

SELECT * FROM STOCKS;


DROP TABLE BOOKS;
DROP TABLE AUTHORS;
DROP TABLE READERS;
DROP TABLE GENRES;
DROP TABLE ORDERS;
DROP TABLE REVIEWS;
DROP TABLE STOCKS;

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------


go
CREATE VIEW GENRES_VIEW AS SELECT * FROM GENRES;
go
CREATE VIEW STOCKS_VIEW AS SELECT * FROM STOCKS;

go
CREATE INDEX INDEX_OF_BOOKS ON BOOKS (ID_AUTHOR, ID_GENRE);
CREATE INDEX INDEX_OF_BOOKSES ON BOOKS (YEAR_OF_PUBLISHING);

go
CREATE INDEX INDEX_OF_AUTHORS ON AUTHORS (LASTNAME_AUTHOR);

go
CREATE INDEX INDEX_OF_READERS ON READERS (LASTNAME_READER);
CREATE INDEX INDEX_OF_READERSES ON READERS (AGE_READER);

go
CREATE INDEX INDEX_OF_GENRES ON GENRES (NAME_GENRE);

go
CREATE INDEX INDEX_OF_ORDER ON ORDERS (ID_BOOK);
CREATE INDEX INDEX_OF_ORDERS ON ORDERS (STATUS_ORDER);
CREATE INDEX INDEX_OF_ORDERSES ON ORDERS (DATE_ORDER);

go
CREATE INDEX INDEX_OF_REVIEW ON REVIEWS (ID_BOOK);
CREATE INDEX INDEX_OF_REVIEWS ON REVIEWS (ID_READER);
CREATE INDEX INDEX_OF_REVIEWSES ON REVIEWS (RATING);

go
CREATE INDEX INDEX_OF_STOCK ON STOCKS (ID_BOOK);
CREATE INDEX INDEX_OF_STOCKS ON STOCKS (COUNT_BOOK);
CREATE INDEX INDEX_OF_STOCKSES ON STOCKS (DATE_ARRIVAL);

go
CREATE SEQUENCE SQNC_TABLE
START WITH 0
INCREMENT BY 1;

go
CREATE PROCEDURE INFO_BOOKS 
AS
SELECT * FROM BOOKS;

go
CREATE PROCEDURE INFO_AUTHORS
AS
SELECT * FROM AUTHORS;

go
CREATE PROCEDURE INFO_READERS
AS
SELECT * FROM READERS;

go
CREATE PROCEDURE INFO_GENRES
AS
SELECT * FROM GENRES;

go
CREATE PROCEDURE INFO_ORDERS
AS
SELECT * FROM ORDERS;

go
CREATE PROCEDURE INFO_REVIEWS
AS
SELECT * FROM REVIEWS;

go
CREATE PROCEDURE INFO_STOCKS
AS
SELECT * FROM STOCKS;

go
CREATE FUNCTION GET_INFO_AUTHORS(@ID_AUTHOR INT)
RETURNS NVARCHAR
AS
BEGIN
	DECLARE @INFOCLIENT NVARCHAR(100);

	SELECT @INFOCLIENT = CONCAT(LASTNAME_AUTHOR, ' ', NAME_AUTHOR, ' ',	MIDDLENAME_AUTHOR) FROM AUTHORS;

	RETURN @INFOCLIENT;
END;

go
CREATE FUNCTION GET_COUNT_OF_ORDERS(@FIRST_DATE DATE, @LAST_DATE DATE)
RETURNS INT
AS
BEGIN
	DECLARE @COUNT_ORDER INT;
	
	SELECT @COUNT_ORDER = COUNT(*) FROM ORDERS
	WHERE DATE_ORDER BETWEEN @FIRST_DATE AND @LAST_DATE;

	RETURN @COUNT_ORDER;
END;

go
CREATE FUNCTION COUNT_BOOKS(@NAME_GENRE NVARCHAR)
RETURNS INT
AS
BEGIN	
	DECLARE @BOOKCOUNT INT;

	SELECT @BOOKCOUNT = COUNT(*) FROM BOOKS INNER JOIN GENRES
	ON BOOKS.ID_GENRE = GENRES.ID_GENRE
	WHERE GENRES.NAME_GENRE = @NAME_GENRE;

	RETURN @BOOKCOUNT;
END;

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

ALTER TABLE AUTHORS
ADD HIERARCHY_COLUMN HIERARCHYID;


GO	
CREATE OR ALTER PROCEDURE GetHIERARCHY_COLUMNAUTHORS
    @ChiefValue HierarchyId
AS
BEGIN
    WITH SubordinateNodes 
AS (
        SELECT HIERARCHY_COLUMN, 1 AS Level
        FROM AUTHORS
        WHERE HIERARCHY_COLUMN = @ChiefValue
        UNION ALL
        SELECT t.HIERARCHY_COLUMN, sn.Level + 1
        FROM AUTHORS AS t
        INNER JOIN SubordinateNodes AS sn ON t.HIERARCHY_COLUMN.GetAncestor(1) = sn.HIERARCHY_COLUMN
    )
    SELECT HIERARCHY_COLUMN, Level
    FROM SubordinateNodes
    ORDER BY Level
END;


GO
BEGIN
	EXEC GetHIERARCHY_COLUMNAUTHORS @ChiefValue = '/'
END;

SELECT * FROM AUTHORS;

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

GO
CREATE OR ALTER PROCEDURE AddHIERARCHY_COLUMNNode
	@IdAuthor INT,
    @LastName VARCHAR(255),
    @FirstName VARCHAR(255),
    @MiddleName VARCHAR(255),
	@ParentNode HIERARCHYID,
	@LevelNode HIERARCHYID
AS
BEGIN

  INSERT INTO AUTHORS(ID_AUTHOR, LASTNAME_AUTHOR, NAME_AUTHOR, MIDDLENAME_AUTHOR, HIERARCHY_COLUMN)
  VALUES(@IdAuthor, @LastName, @FirstName, @MiddleName, @ParentNode.GetDescendant(@LevelNode, NULL));

END;

GO
EXEC AddHIERARCHY_COLUMNNode 2, 'Pushkin', 'Alexander', 'Sergeevich', '/', NULL;
EXEC AddHIERARCHY_COLUMNNode 3, 'Pushkin', 'Alexander', 'Sergeevich', '/', '/1/';
EXEC AddHIERARCHY_COLUMNNode 4, 'Pushkin', 'Alexander', 'Sergeevich', '/', '/2/';
EXEC AddHIERARCHY_COLUMNNode 5, 'Pushkin', 'Alexander', 'Sergeevich', '/3/', NULL;
EXEC AddHIERARCHY_COLUMNNode 7, 'Pushkin', 'Alexander', 'Sergeevich', '/3/', '/3/1/';
EXEC AddHIERARCHY_COLUMNNode 6, 'Pushkin', 'Alexander', 'Sergeevich', '/3/1/', NULL;

INSERT INTO AUTHORS(ID_AUTHOR, LASTNAME_AUTHOR, NAME_AUTHOR, MIDDLENAME_AUTHOR, HIERARCHY_COLUMN)
VALUES (1, 'Lermontov', 'Michael', 'Yurievich', hierarchyid::GetRoot());


SELECT HIERARCHY_COLUMN.ToString () AS NodeAsString,
  HIERARCHY_COLUMN AS NodeAsBinary,
  HIERARCHY_COLUMN.GetLevel() AS Level
FROM AUTHORS;


	
SELECT * FROM AUTHORS;


DELETE FROM AUTHORS;

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

GO
CREATE OR ALTER PROCEDURE MoveSubtree
@oldRoot HIERARCHYID,
@newRoot HIERARCHYID
AS
BEGIN
UPDATE AUTHORS
SET HIERARCHY_COLUMN = HIERARCHY_COLUMN.GetReparentedValue(@oldRoot, @newRoot)
WHERE HIERARCHY_COLUMN.IsDescendantOf(@oldRoot) = 1;
END;

EXEC MoveSubtree '/3/1/', '/2/1/';


SELECT HIERARCHY_COLUMN.ToString () AS NodeAsString,
  HIERARCHY_COLUMN AS NodeAsBinary,
  HIERARCHY_COLUMN.GetLevel() AS Level
FROM AUTHORS;

