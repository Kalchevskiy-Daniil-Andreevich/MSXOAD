CREATE TABLE BOOKS(
    ID_BOOK NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ID_AUTHOR NUMBER NOT NULL,
    ID_GENRE NUMBER NOT NULL,
    NAME_BOOK NVARCHAR2(255) NOT NULL,
    DIRECTION_BOOK NVARCHAR2(255) NOT NULL,
    YEAR_OF_PUBLISHING DATE NOT NULL,
    CONSTRAINT BOOKS_PK PRIMARY KEY(ID_BOOK),
    CONSTRAINT BOOKS_FK FOREIGN KEY (ID_AUTHOR) REFERENCES AUTHORS (ID_AUTHOR),
    CONSTRAINT BOOKS_FK2 FOREIGN KEY (ID_GENRE) REFERENCES GENRES (ID_GENRE)
);

SELECT COUNT(*) FROM BOOKS;
SELECT * FROM BOOKS;

DELETE FROM BOOKS;

CREATE TABLE READERS(
    ID_READER NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    LASTNAME_READER NVARCHAR2(255) NOT NULL,
    NAME_READER NVARCHAR2(255) NOT NULL,
    MIDDLENAME_READER NVARCHAR2(255) NOT NULL,
    CONSTRAINT READERS_PK PRIMARY KEY(ID_READER)
);


SELECT * FROM READERS;

CREATE TABLE AUTHORS(
    ID_AUTHOR NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    LASTNAME_AUTHOR NVARCHAR2(255) NOT NULL,
    NAME_AUTHOR NVARCHAR2(255) NOT NULL,
    MIDDLENAME_AUTHOR NVARCHAR2(255) NOT NULL,
    CONSTRAINT AUTHORS_PK PRIMARY KEY(ID_AUTHOR)
);

SELECT COUNT(*) FROM AUTHORS;
SELECT * FROM AUTHORS;

DELETE FROM AUTHORS;

CREATE TABLE GENRES(
    ID_GENRE NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    NAME_GENRE NVARCHAR2(255) NOT NULL,
    CONSTRAINT GENRES_PK PRIMARY KEY(ID_GENRE)
);

SELECT COUNT(*) FROM GENRES;
SELECT * FROM GENRES;

DELETE FROM GENRES;

CREATE TABLE ORDERS(
    ID_ORDER NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ID_BOOK NUMBER NOT NULL,
    ID_READER NUMBER NOT NULL,
    STATUS_ORDER NVARCHAR2(255) NOT NULL,
    DATE_ORDER DATE NOT NULL,
    PRICE_ORDER NUMBER NOT NULL,
    CONSTRAINT ORDERS_PK PRIMARY KEY(ID_ORDER),
    CONSTRAINT ORDERS_FK FOREIGN KEY(ID_BOOK) REFERENCES BOOKS (ID_BOOK),
    CONSTRAINT ORDERS2_FK FOREIGN KEY(ID_READER) REFERENCES READERS(ID_READER)
);

SELECT COUNT(*) FROM ORDERS;
SELECT * FROM ORDERS;

DELETE FROM ORDERS;

CREATE TABLE REVIEWS(
    ID_REVIEW NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ID_BOOK NUMBER NOT NULL,
    ID_READER NUMBER NOT NULL,
    RATING DECIMAL NOT NULL,
    CONSTRAINT REVIEWS_PK PRIMARY KEY(ID_REVIEW),
    CONSTRAINT REVIEWS_FK FOREIGN KEY(ID_BOOK) REFERENCES BOOKS(ID_BOOK),
    CONSTRAINT REVIEWS_FK2 FOREIGN KEY(ID_READER) REFERENCES READERS(ID_READER)
);


CREATE TABLE STOCKS(
    ID_STOCK NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    ID_BOOK NUMBER NOT NULL,
    COUNT_BOOK NUMBER NOT NULL,
    DATE_ARRIVAL DATE NOT NULL,
    CONSTRAINT STOCKS_PK PRIMARY KEY(ID_STOCK),
    CONSTRAINT STOCKS_FK FOREIGN KEY(ID_BOOK) REFERENCES BOOKS(ID_BOOK) 
);


CREATE TABLE SALES(
    ID_AUTHOR NUMBER NOT NULL,
    ID_ORDER NUMBER NOT NULL,
    ID_BOOK NUMBER NOT NULL,
    ID_READER NUMBER NOT NULL,
    STATUS_ORDER NVARCHAR2(255) NOT NULL,
    COUNT_BOOK NUMBER NOT NULL,
    MONTH_ORDER NUMBER NOT NULL,
    YEAR_ORDER NUMBER NOT NULL,
    PRICE_ORDER NUMBER NOT NULL,
    CONSTRAINT ORDERS_PK1 PRIMARY KEY(ID_ORDER),
    CONSTRAINT ORDERS_FK2 FOREIGN KEY(ID_BOOK) REFERENCES BOOKS (ID_BOOK),
    CONSTRAINT ORDERS2_FK3 FOREIGN KEY(ID_READER) REFERENCES READERS(ID_READER)
);

DROP TABLE SALES;


DROP TABLE REVIEWS;
DROP TABLE ORDERS;
DROP TABLE STOCKS;
DROP TABLE READERS;
DROP TABLE AUTHORS;
DROP TABLE GENRES;
DROP TABLE BOOKS;

CREATE USER PUBLISHING IDENTIFIED BY 0344533;
GRANT ALL PRIVILEGES TO PUBLISHING;


CREATE MATERIALIZED VIEW GENRES_VIEW
BUILD IMMEDIATE 
REFRESH FORCE
AS SELECT * FROM GENRES;

CREATE MATERIALIZED VIEW STOCKS_VIEW
BUILD IMMEDIATE 
REFRESH FORCE
AS SELECT * FROM STOCKS;


CREATE INDEX INDEX_BOOKS ON BOOKS (ID_AUTHOR, ID_GENRE);
CREATE INDEX INDEX_READERS ON READERS (AGE_READER);
CREATE INDEX INDEX_AUTHORS ON ORDERS (ID_BOOK);
CREATE INDEX INDEX_REVIEWS ON REVIEWS (ID_BOOK, ID_READER, RATING);
CREATE INDEX INDEX_STOCKS ON STOCKS (ID_BOOK, COUNT_BOOK);


CREATE SEQUENCE SQNC_TABLE
MINVALUE 0
START WITH 0
INCREMENT BY 1;


CREATE OR REPLACE PROCEDURE GET_ALL_BOOKS AS
BEGIN
    FOR book IN (SELECT * FROM BOOKS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_BOOK: ' || book.ID_BOOK || ', ID_AUTHOR: ' || book.ID_AUTHOR || ', ID_GENRE: ' || book.ID_GENRE || ', NAME_BOOK: ' || book.NAME_BOOK || ', YEAR_OF_PUBLISHING: ' || book.YEAR_OF_PUBLISHING);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_READERS AS
BEGIN
    FOR reader IN (SELECT * FROM READERS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_READER: ' || reader.ID_READER || ', LASTNAME_READER: ' || reader.LASTNAME_READER || ', NAME_READER: ' || reader.NAME_READER || ', MIDDLENAME_READER: ' || reader.MIDDLENAME_READER || ', AGE_READER: ' || reader.AGE_READER || ', CONTACTS_READER: ' || reader.CONTACTS_READER);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_AUTHORS AS
BEGIN
    FOR author IN (SELECT * FROM AUTHORS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_AUTHOR: ' || author.ID_AUTHOR || ', LASTNAME_AUTHOR: ' || author.LASTNAME_AUTHOR || ', NAME_AUTHOR: ' || author.NAME_AUTHOR || ', MIDDLENAME_AUTHOR: ' || author.MIDDLENAME_AUTHOR);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_GENRES AS
BEGIN
    FOR genre IN (SELECT * FROM GENRES)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_GENRE: ' || genre.ID_GENRE || ', NAME_GENRE: ' || genre.NAME_GENRE);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_ORDERS AS
BEGIN
    FOR order_row IN (SELECT * FROM ORDERS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_ORDER: ' || order_row.ID_ORDER || ', ID_BOOK: ' || order_row.ID_BOOK || ', STATUS_ORDER: ' || order_row.STATUS_ORDER || ', DATE_ORDER: ' || order_row.DATE_ORDER);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_REVIEWS AS
BEGIN
    FOR review IN (SELECT * FROM REVIEWS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_REVIEW: ' || review.ID_REVIEW || ', ID_BOOK: ' || review.ID_BOOK || ', ID_READER: ' || review.ID_READER || ', RATING: ' || review.RATING);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GET_ALL_STOCKS AS
BEGIN
    FOR stock IN (SELECT * FROM STOCKS)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_STOCK: ' || stock.ID_STOCK || ', ID_BOOK: ' || stock.ID_BOOK || ', COUNT_BOOK: ' || stock.COUNT_BOOK || ', DATE_ARRIVAL: ' || stock.DATE_ARRIVAL);
    END LOOP;
END;
/


CREATE OR REPLACE FUNCTION get_author_name(author_id NUMBER)
RETURN NVARCHAR2
AS
    author_name NVARCHAR2(255);
BEGIN
    SELECT LASTNAME_AUTHOR || ' ' || NAME_AUTHOR || ' ' || MIDDLENAME_AUTHOR
    INTO author_name
    FROM AUTHORS
    WHERE ID_AUTHOR = author_id;
    
    RETURN author_name;
END;
/

CREATE OR REPLACE FUNCTION get_order_count(start_date DATE, end_date DATE)
RETURN NUMBER
AS
    order_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO order_count
    FROM ORDERS
    WHERE DATE_ORDER BETWEEN start_date AND end_date;
    
    RETURN order_count;
END;
/

CREATE OR REPLACE FUNCTION get_book_count_by_genre(genre_id NUMBER)
RETURN NUMBER
AS
    book_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO book_count
    FROM BOOKS
    WHERE ID_GENRE = genre_id;
    
    RETURN book_count;
END;
/

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

ALTER TABLE AUTHORS
ADD HIERARCHY_COLUMN NUMBER;

CREATE OR REPLACE PROCEDURE DisplaySubordinates(
    p_node_id NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT LEVEL AS hierarchy_level, ID_AUTHOR, LASTNAME_AUTHOR, NAME_AUTHOR, MIDDLENAME_AUTHOR
        FROM AUTHORS
        START WITH ID_AUTHOR = p_node_id
        CONNECT BY PRIOR ID_AUTHOR = PRIOR HIERARCHY_COLUMN
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(
            RPAD(' ', (rec.hierarchy_level - 1) * 4) ||
            rec.LASTNAME_AUTHOR || ', ' || rec.NAME_AUTHOR || ' ' || rec.MIDDLENAME_AUTHOR || ' (' || rec.ID_AUTHOR || ')'
        );
    END LOOP;
END;
/
EXECUTE DisplaySubordinates(7);

SELECT * FROM AUTHORS;

DELETE FROM AUTHORS;
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE AddAuthors(
    p_id_authors NUMBER,
    p_last_name VARCHAR2,
    p_first_name VARCHAR2,
    p_middle_name VARCHAR2,
    p_hierarchy_column NUMBER
) AS
BEGIN
    INSERT INTO AUTHORS (
        ID_AUTHOR, LASTNAME_AUTHOR, NAME_AUTHOR, MIDDLENAME_AUTHOR, HIERARCHY_COLUMN
    ) VALUES (
        p_id_authors, p_last_name, p_first_name, p_middle_name, p_hierarchy_column
    );
END;
/

EXECUTE AddAuthors(1, 'Pushkin', 'Max', 'Sergeevich', NULL);
EXECUTE AddAuthors(2, 'Pushkin', 'Max', 'Sergeevich', 1);
EXECUTE AddAuthors(3, 'Pushkin', 'Max', 'Sergeevich', 2);
EXECUTE AddAuthors(4, 'Pushkin', 'Max', 'Sergeevich', 1);
EXECUTE AddAuthors(5, 'Pushkin', 'Max', 'Sergeevich', 4);
EXECUTE AddAuthors(6, 'Pushkin', 'Max', 'Sergeevich', 1);

SELECT * FROM AUTHORS;

SELECT LPAD('  ', 3*LEVEL)||NAME_AUTHOR AS BJT
FROM AUTHORS
START WITH HIERARCHY_COLUMN IS NULL
CONNECT BY PRIOR ID_AUTHOR = HIERARCHY_COLUMN


SELECT * FROM AUTHORS;
DELETE FROM AUTHORS;

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE MoveSubtree(
p_source_node NUMBER,
p_destination_node NUMBER
)
IS
BEGIN
UPDATE AUTHORS
SET HIERARCHY_COLUMN = p_destination_node || SUBSTR(HIERARCHY_COLUMN, LENGTH(p_source_node) + 1)
WHERE HIERARCHY_COLUMN LIKE p_source_node || '%' AND ID_AUTHOR <> p_source_node;
END;
/

EXEC MoveSubtree(2, 6);

SELECT * FROM AUTHORS;

SELECT LPAD('  ', 3*LEVEL)||NAME_AUTHOR AS BJT
FROM AUTHORS
START WITH HIERARCHY_COLUMN IS NULL
CONNECT BY PRIOR ID_AUTHOR = HIERARCHY_COLUMN


CREATE USER LAB5 IDENTIFIED BY 0344533;
GRANT DBA TO LAB5;
